apiVersion: apps/v1
kind: Deployment
metadata:
  name: polling-app-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: polling-app-client
  template:
    metadata:
      labels:
        app: polling-app-client
    spec:
      containers:
      - name: polling-app-client
        image: saihari1/pollf:latest  # Replace with your image name
        imagePullPolicy: IfNotPresent
        ports:
          - name: frontend         # Changed to 'frontend' for the port name
            containerPort: 3000    # The frontend app listens on port 3000
      - name: nginx
        image: nginx:latest
        ports:
          - name: nginx-port      # NGINX listens on port 80 for external traffic
            containerPort: 80
        volumeMounts:
          - name: nginx-config
            mountPath: /etc/nginx/conf.d
            subPath: default.conf
            readOnly: true
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config   # Referencing the ConfigMap for NGINX configuration

---

# ConfigMap for NGINX Reverse Proxy Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: default
data:
  default.conf: |
    server {
        listen 80;
        
        location / {
            proxy_pass http://localhost:3000;  # Forward traffic from port 80 to port 3000 (inside the same pod)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

---

# Service Configuration to expose the app externally via port 80
apiVersion: v1
kind: Service
metadata:
  name: polling-app-client
spec:
  selector:
    app: polling-app-client
  ports:
    - name: frontend    # Changed the name to 'frontend' for clarity
      port: 80          # Expose the service externally on port 80
      targetPort: 80    # The NGINX container listens on port 80
  type: NodePort        # Use NodePort to expose the service on every node (for testing or local access)
